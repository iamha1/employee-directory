{"version":3,"sources":["components/Header/index.js","components/API.js","components/Search/index.js","components/EmployeeTable/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","classname","url","console","log","axios","get","Search","props","className","type","name","placeholder","id","value","search","onChange","handleInputChange","EmployeeTable","state","sortOrder","results","event","target","searchTerm","toLowerCase","setState","sortByFName","sortedEmployees","sort","a","b","first","reverse","sortByLName","last","API","then","res","data","catch","err","this","onClick","map","item","includes","key","login","uuid","src","picture","thumbnail","alt","phone","email","dob","date","split","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5271ff94.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../Header/style.css\"\n\n//Header \nfunction Header() {\n    return(\n        \n        <header classname=\"header\">\n        <h1>Employee Directory</h1>\n        <p>This is the company's directory</p>\n        </header>\n    );\n}\n\nexport default Header;","import axios from \"axios\";\n\nconst url = 'https://randomuser.me/api/?results=50';\n\n//api call\nexport default {\n    ApiSearch: function () {\n        console.log(url)\n        return axios.get(url)\n\n    }\n}\n","import React from \"react\";\nimport \"../Search/style.css\"\n\n\nfunction Search(props) {\n    return (\n        <div className=\"Search row\">\n            <input type=\"text\" name=\"search\" placeholder=\"Search\" id=\"inputBox\" value={props.search} onChange={props.handleInputChange} ></input>\n        </div>\n    )\n}\n\n//Exporting search component\nexport default Search;\n","import React from \"react\";\nimport \"../EmployeeTable/style.css\"\nimport API from \"../API\" \nimport Search from \"../Search\"\n\n\n// const employees = [\n//     {\n//         id: 1,\n//         name: \"dave\",\n//         image: \"\",\n//         phone: \"123-456-789\",\n//         email: \"dave@dave.com\",\n//         dob: \"01/01/1989\"\n//     },\n\n//     {\n//         id: 2,\n//         name: \"scott\",\n//         image: \"\",\n//         phone: \"123-456-789\",\n//         email: \"scott@dave.com\",\n//         dob: \"01/20/1989\"\n//     },\n\n//     {\n//         id: 3,\n//         name: \"marlon\",\n//         image: \"\",\n//         phone: \"123-456-789\",\n//         email: \"marlon@dave.com\",\n//         dob: \"10/20/1983\"\n//     },\n// ]\n// class EmployeeTable extends React.Component {\n//     state = {\n//         employees: employees,\n//         sortOrder: \"ASC\"\n//     }\n//     sortByName = () => {\n//         if(this.state.sortOrder === \"ASC\")\n//        let sortedEmployees = this.state.employees.sort(function\n//         (a, b) {\n//            if(b.name > a.name) {\n//             return -1;\n//            }\n//            if(a.name > b.name) {\n//                return 1;\n//            }\n//            return 0;\n       \n//        });\n  \n//     this.setState( {employees: sortedEmployees });\n        \n//     }\n\n//     render() {\n//         return (\n//         <table>\n//             <thead>\n//                 <tr>\n//                     <th>Image</th>\n//                     <th>Name</th>\n//                     <th>Phone</th>\n//                     <th>Email</th>\n//                     <th>DOB</th>\n//                 </tr>\n//             </thead>\n//             <tbody>\n//                 {employees.map(person => (\n//                     <tr key={person.id}> \n//                         <td>{person.image}</td>\n//                         <td> {person.name}</td>\n//                         <td> {person.phone}</td>\n//                         <td> {person.email}</td>\n//                         <td> {person.dob}</td>\n//                     </tr>\n//                 ))}\n//             </tbody>\n//         </table>\n//     );\n//                 }\n// }\n\n// export default EmployeeTable;\n\n//Table class\nclass EmployeeTable extends React.Component {\n\n    //States\n    state = {\n      sortOrder: \"\",\n      results: [],\n      search: \"\"\n    }\n  \n    //calling api\n    componentDidMount() {\n      API.ApiSearch()\n        .then(res => {\n          this.setState({ results: res.data.results })\n          console.log(this.state.results)\n        }).catch(err => console.log(err))\n    }\n  \n  \n    //Handling input in search bar \n    handleInputChange = event => {\n  \n      if (event.target.name === \"search\") {\n        const searchTerm = event.target.value.toLowerCase();\n        this.setState({\n          search: searchTerm\n        })\n      }\n    }\n  \n    //Sort by first name\n    sortByFName = () => {\n      const sortedEmployees = this.state.results.sort((a, b) => {\n        if (b.name.first > a.name.first) {\n          return -1\n        }\n        if (a.name.first > b.name.first) {\n          return 1\n        }\n        return 0;\n      });\n  \n      if (this.state.sortOrder === \"DESC\") {\n        sortedEmployees.reverse();\n        this.setState({ sortOrder: \"ASC\" });\n      } else {\n        this.setState({ sortOrder: \"DESC\" });\n      }\n      this.setState({ results: sortedEmployees })\n    }\n  \n    //Sort by last name \n    sortByLName = () => {\n      const sortedEmployees = this.state.results.sort((a, b) => {\n        if (b.name.last > a.name.last) {\n          return -1\n        }\n        if (a.name.last > b.name.last) {\n          return 1\n        }\n        return 0;\n      });\n      if (this.state.sortOrder === \"DESC\") {\n        sortedEmployees.reverse();\n        this.setState({ sortOrder: \"ASC\" });\n      } else {\n        this.setState({ sortOrder: \"DESC\" });\n      }\n      this.setState({ results: sortedEmployees })\n    }\n  \n    //Render items on the page\n    render() {\n      return (\n        <div>\n          <Search handleInputChange={this.handleInputChange}\n            search={this.state.search} />\n  \n          <div className=\"row tableHeadDiv\">\n            <table>\n              <thead>\n                <tr>\n                  <th>Image</th>\n                  <th>F-Name <span className=\"downArrow\" onClick={this.sortByFName}></span></th>\n                  <th>L-Name <span className=\"downArrow\" onClick={this.sortByLName}></span></th>\n                  <th>Phone</th>\n                  <th>Email</th>\n                  <th>DOB </th>\n                </tr>\n              </thead>\n  \n              { //Mapping through the results and showing those to be displayed, all if no search term, only those wo include the search if there is\n              this.state.results && this.state.results.map(item => \n                item.name.first.toLowerCase().includes(this.state.search) ?\n                <tbody key={item.login.uuid}>\n                <tr>\n                  <td ><img src={item.picture.thumbnail} alt=\"thumbnail\" /></td>\n                  <td > {item.name.first} </td>\n                  <td > {item.name.last} </td>\n                  <td >{item.phone} </td>\n                  <td >{item.email}</td>\n                  <td >{item.dob.date.split(\"T\")[0]}</td>\n                </tr>\n              </tbody> \n              \n              :  \n            // this.state.results && this.state.results.map(item => \n               item.name.last.toLowerCase().includes(this.state.search) ?\n                <tbody key={item.login.uuid}>\n                <tr>\n                  <td ><img src={item.picture.thumbnail} alt=\"thumbnail\" /></td>\n                 <td > {item.name.first} </td>\n                  <td > {item.name.last} </td>\n                 <td >{item.phone} </td>\n                  <td >{item.email}</td>\n                  <td >{item.dob.date.split(\"T\")[0]}</td>\n               </tr>\n             </tbody> \n             :\n             null\n             )}\n    \n              \n            </table>\n          </div>\n        </div>\n      )\n    }\n  }\n  \n  export default EmployeeTable;\n  ","import React from \"react\";\nimport Header from \"./components/Header\";\nimport EmployeeTable from \"./components/EmployeeTable\"; \n\nfunction App() {\n  return (\n    <div>\n    <Header />\n    <EmployeeTable />\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}